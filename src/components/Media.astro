---
import fetch from 'node-fetch';
import type { MediaOgpData } from '../types';
import { mediaItems } from '../data/media';

async function getOgp() { 
  const ogps: (MediaOgpData & { date: string; type: string })[] = [];
  for (const item of mediaItems) {
    try {
      const res = await fetch(item.url);
      const html = await res.text();

      const ogTitleMatch = html.match(/<meta[^>]*property=["']og:title["'][^>]*content=["']([^"']*?)["'][^>]*>/i);
      const ogDescMatch = html.match(/<meta[^>]*property=["']og:description["'][^>]*content=["']([^"']*?)["'][^>]*>/i);
      const ogImageMatch = html.match(/<meta[^>]*property=["']og:image["'][^>]*content=["']([^"']*?)["'][^>]*>/i);
      
      const ogp: MediaOgpData = {
        'og:title': ogTitleMatch?.[1]?.replace(/&quot;/g, '"').replace(/&amp;/g, '&') || 'メディア掲載',
        'og:description': ogDescMatch?.[1]?.replace(/&quot;/g, '"').replace(/&amp;/g, '&') || null,
        'og:url': item.url,
        'og:image': ogImageMatch?.[1] || null
      };
      // MediaItemに画像が指定されている場合は優先
      const finalImage = item.image || ogp['og:image'] || '/images/logo/seigo2016-icon-small.webp';
      ogps.push({
        ...ogp,
        'og:image': finalImage,
        date: item.date,
        type: item.type
      });
    } catch (error) {
      // フォールバック: OGP取得に失敗した場合
      const fallbackImage = item.image || '/images/logo/seigo2016-icon-small.webp';
      ogps.push({
        'og:title': 'メディア掲載',
        'og:description': 'メディア掲載情報',
        'og:url': item.url,
        'og:image': fallbackImage,
        date: item.date,
        type: item.type
      });
    }
  };
  return ogps;
};

function getTypeLabel(type: string): string {
  switch (type) {
    case 'interview':
      return 'インタビュー';
    case 'article':
      return '記事';
    case 'podcast':
      return 'ポッドキャスト';
    case 'video':
      return '動画';
    default:
      return '記事';
  }
}

function truncateDescription(description: string | null, maxLength: number = 100): string {
  if (!description) return '';
  if (description.length <= maxLength) return description;
  return description.substring(0, maxLength) + '...';
}

const ogps = await getOgp();
---

<div id="media" class="container justify-center w-full flex flex-col items-center">
  <div class="w-full text-center">
    <h2 class="text-3xl my-4 font-bold text-gray-900 leading-tight mb-2 border-t-4 border-b-4 border-gray-600 py-4">Media</h2>
    <div>
      <div class="grid lg:grid-cols-3 gap-4 md:grid-cols-2 grid-cols-1">
        { ogps.map((ogp) => 
          <div class="bg-white p-4 rounded-lg shadow-md">
            <a href={ogp['og:url']} class="hover:shadow-lg" target="_blank" rel="noopener noreferrer">
              <div class="text-center justify-center flex flex-col">
                <img src={ogp['og:image']} class="h-24 mx-auto" alt={ogp['og:title']}>
                <div class="flex items-center justify-center mt-2 mb-1">
                  <span class="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full mr-2">
                    {getTypeLabel(ogp.type)}
                  </span>
                  <span class="text-xs text-gray-500">{ogp.date}</span>
                </div>
                <h3 class="text-md font-semibold mt-1">{ ogp['og:title'] }</h3>
              </div>
              <p class="mt-4 text-sm wrap-normal">{ truncateDescription(ogp['og:description']) }</p>
            </a>
          </div>
          )
        }
      </div>
    </div>
  </div>
</div>
